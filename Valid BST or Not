public class BinaryTreeBSTChecker {
    public static boolean isValidBST(TreeNode root) {
        return isValidBSTHelper(root, null, null);
    }
    private static boolean isValidBSTHelper(TreeNode node, Integer min, Integer max) {
        if (node == null) {
            return true;
        }
        if (min != null && node.val <= min) {
            return false;
        }
        if (max != null && node.val >= max) {
            return false;
        }
        return isValidBSTHelper(node.left, min, node.val) && isValidBSTHelper(node.right, node.val, max);
    }
    public static void main(String[] args) {
        
        TreeNode root1 = new TreeNode(10);
        root1.left = new TreeNode(5);
        root1.right = new TreeNode(15);
        root1.left.left = new TreeNode(3);
        root1.left.right = new TreeNode(7);
        root1.right.right = new TreeNode(20);
        System.out.println("Is tree 1 a BST? " + isValidBST(root1));  
        TreeNode root2 = new TreeNode(10);
        root2.left = new TreeNode(15); // Invalid: 15 > 10
        root2.right = new TreeNode(20);
        root2.left.left = new TreeNode(3);
        root2.left.right = new TreeNode(7);
        System.out.println("Is tree 2 a BST? " + isValidBST(root2)); 
    }
}
