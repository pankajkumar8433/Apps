import java.util.*;
public class BFSGraph {
    public static void bfs(ArrayList<ArrayList<Integer>> adj, int startNode, int V) {
        Queue<Integer> queue = new LinkedList<>();
        boolean[] visited = new boolean[V]; 
        visited[startNode] = true;
        queue.add(startNode);
        System.out.println("BFS Traversal starting from node " + startNode + ":");
        while (!queue.isEmpty()) {
            int currentNode = queue.poll(); 
            System.out.print(currentNode + " ");
            for (int neighbor : adj.get(currentNode)) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.add(neighbor);
                }
            }
        }
        System.out.println();
    }
    public static void main(String[] args) {
        int V = 5; // Number of vertices
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>(V);
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        adj.get(0).add(1);
        adj.get(0).add(2);
        adj.get(1).add(3);
        adj.get(2).add(4);
        adj.get(3).add(4);
        bfs(adj, 0, V);
    }
}
